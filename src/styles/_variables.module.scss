// Color Palette
$zoom-blue: #00bfb2;
$artic-white: #f4f4f9;
$dark-blue: #171926;

@import url("https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&display=swap");

// Font Define
$primaryFont: "Montserrat", sans-serif;

$titleSize: 2.25rem;
$subHeader: 1.125rem;
$paraSize: 1.375rem;

$mobileWidth: 760px;
$small-mobileWidth: 360px;

// Element Size Define
$navHeight: 85px;
$navMobileHeight: 50px;
$wrapMaxWidth: 1400px;
$widthPadding: 7%;
$desktopPadding: 150px;
$desktopSmallPadding: 60px;
$mobilePadding: 80px;

$defaultBorder: 15px;
$mobileBorder: 25px;

$masOscuro: #171926;
$oscuro: #2d3346;
$midnight: #383e5f;
$mist: #b8c3d0;
$minimal: #f4f4f8;
$blanco: #fff;
$azure: #3c86a5;
$coral: #cb5e65;
$forest: #799884;
$purple: #9264e9;
$white: #fff;

// Dark colors
$onyx: #191c21;
// $onyx: #1e2329;
$jetBlack: #14171c;
// $raven: #262930;
$raven: #1e2329;
$steelBlue: #2b313c;
$cloud: #687077;
$clude: #7f8197;
$crow: #181c21;

:export {
  masOscuro: $masOscuro;
  oscuro: $oscuro;
  midnight: $midnight;
  mist: $mist;
  minimal: $minimal;
  blanco: $blanco;
  azure: $azure;
  coral: $coral;
  forest: $forest;
  purple: $purple;
  onyx: $onyx;
  jetBlack: $jetBlack;
  raven: $raven;
  steelBlue: $steelBlue;
  cloud: $cloud;
  lightBase: getColor(lightBase);
  lightdarkBase: getColor(lightdarkBase);
  defaultBorder: $defaultBorder;
  mobileWidth: $mobileWidth;
}

// Light Theme
$colors: (
  // base
  lightBase: $blanco,
  lightdarkBase: $minimal,
  lightLightBase: $blanco,
  lightLightBase2: $minimal,
  lightLightBase3: $minimal,
  darkestDark: $masOscuro,
  darkLightBase: $mist,
  darkBase: $oscuro,
  darkBase2: $steelBlue,
  darkbase3: $oscuro,
  medDarkBase: $masOscuro,
  // Btn Based
  lightDarkText: $midnight,
  // Nav Text
  menuText: $midnight,
  // Icon Based
  icn-lightBG: $minimal,
  icon-lightTXT: $midnight,
  // Text
  textTitle: $azure,
  textHeader: $midnight,
  textHeaderDarkBG: $blanco,
  textSubTitle: $mist,
  // normalText: $midnight,
  normalText: #7f8197,
  // Color Specific
  azureToMist: $azure,
  azureToSteelBlue: $azure,
  whiteToAzure: $white,
  whiteToRaven: $white,
  midnightToRaven: $midnight,
  oscuroToRaven: $oscuro,
  mistToCloud: $mist
);

// Dark Theme
$colors-dark: (
  // base
  lightBase: $onyx,
  lightdarkBase: $jetBlack,
  lightLightBase: $raven,
  lightLightBase2: $steelBlue,
  lightLightBase3: $raven,
  darkLightBase: $steelBlue,
  darkestDark: $jetBlack,
  darkBase: $oscuro,
  darkBase2: $steelBlue,
  darkbase3: $blanco,
  medDarkBase: $crow,
  // Btn Based
  lightDarkText: $minimal,
  // Nav Text
  menuText: $cloud,
  // Icon Based
  icn-lightBG: $raven,
  icon-lightTXT: $cloud,
  // Text
  textTitle: $azure,
  textHeader: $minimal,
  textHeaderDarkBG: $blanco,
  textSubTitle: $cloud,
  normalText: $cloud,
  // Color Specific
  azureToMist: $mist,
  azureToSteelBlue: $steelBlue,
  whiteToAzure: $azure,
  whiteToRaven: $raven,
  midnightToRaven: $raven,
  oscuroToRaven: $raven,
  mistToCloud: $cloud
);

:root {
  @each $name, $color in $colors {
    --color-#{$name}: #{$color};
  }
}

// Dark Mode
@media (prefers-color-scheme: dark) {
  :root {
    @each $name, $color in $colors-dark {
      --color-#{$name}: #{$color};
    }
  }
}

@function getColor($color-name) {
  @return var(--color-#{$color-name});
}

// Responsive
@mixin responsive($size) {
  @if $size == "small-mobile" {
    @media screen and (max-width: $small-mobileWidth) {
      @content;
    }
  } @else if $size == "mobile" {
    @media screen and (max-width: $mobileWidth) {
      @content;
    }
  } @else if $size == "desktop" {
    @media screen and (min-width: 761px) {
      @content;
    }
  } @else if $size == "desktopish" {
    @media screen and (max-width: 1000px) {
      @content;
    }
  }
}

@mixin sectionPadding($layout) {
  @if $layout == "mobile" {
    padding: $mobilePadding $widthPadding;
  } @else if $layout == "desktop" {
    padding: $desktopPadding $widthPadding;
  } @else if $layout == "desktop-small" {
    padding: 60px $widthPadding;

    @include responsive("mobile") {
      padding: 30px $widthPadding;
    }
  }
}

// Object Definitions
@mixin objectShadow($state, $color) {
  @if $color == "snow" {
    @if $state == "default" {
      box-shadow: 0px 10px 30px rgba(0, 0, 0, 0.04) !important;
    } @else if $state == "minimal" {
      box-shadow: 0px 10px 30px rgba(0, 0, 0, 0.07) !important;
    } @else if $state == "hover" {
      box-shadow: 0px 10px 30px rgba(0, 0, 0, 0.1) !important;
    }
  } @else if $state == "default" and $color == "azure" {
    box-shadow: 0px 5px 20px rgba($azure, 0.4);
  } @else if $state == "hover" and $color == "azure" {
    box-shadow: 0px 5px 20px rgba($azure, 0.5);
  } @else if $state == "default" and $color == "midnight" {
    box-shadow: 0px 10px 20px rgba($midnight, 0.2) !important;
  }
}

@mixin navHeight {
  height: $navMobileHeight;

  @include responsive("mobile") {
    height: $navMobileHeight;
  }
}

@mixin objectCorner($type) {
  @if $type == "default" {
    border-radius: $defaultBorder !important;

    @include responsive("mobile") {
      border-radius: $mobileBorder !important;
    }
  } @else if $type == "default-mobile" {
    border-radius: $defaultBorder !important;
  } @else if $type == "mobile" {
    border-radius: $mobileBorder !important;
  } @else if $type == "circular" {
    border-radius: 50%;
  }
}
